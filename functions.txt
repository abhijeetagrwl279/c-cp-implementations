
//____________________________________________________vscode reading|writing execution function____________________________
void ex()
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
//_______________________________________________________fast function____________________________________
void fast()
{
//______don't use it in interactive problems______
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
//____________________________________________________policy based data structures_____________________

// ordered set in GNU C++
// Header files, namespaces,
// macros as defined above
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define new_data_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>  
// Driver code
int main()
{
	new_data_set p;
	p.insert(5);
	p.insert(2);
	p.insert(6);
	p.insert(4);
	// value at 3rd index in sorted array.
	cout << "The value at 3rd index ::"
		<< *p.find_by_order(3) << endl;

	// index of number 6
	cout << "The index of number 6::"
		<< p.order_of_key(6) << endl;

	// number 7 not in the set but it will show the
	// index number if it was there in sorted array.
	cout << "The index of number seven ::"
		<< p.order_of_key(7) << endl;

	return 0;
}


//_______________________________________________________________power function_______________________

long long int power(long long int a,long long int b)
{
    if(b==0)
    {
        return 1;
    }
    else
    {
        long long int val=power(a,b/2);
        if(b%2==1)
        {
            return val*val*a;
        }
        else
        {
            return val*val;
        }
    }
}
//____________________________________________________________gcd function_______________________

long long int gcd(long long int a,long long int b)
{
    if(a==0)
    {
        return b;
    }
    else
    {
        return gcd(b%a,a);
    }
}
//___________________________________________________________segment tree________________________

long long int N=1000000;
vector<long long int>tree(4*N);
vector<long long int>v;
long long int upd(int node,int st,int en)
{
    int mid=(st+en)/2;
    if(st==en)
    {
        return tree[node]=v[st];
    }
    else
    {
        return tree[node]=min(upd(2*node,st,mid),upd(2*node+1,mid+1,en));
    }
}
long long int upd2(int node,int st,int en,int ind,long long int val)
{
    int mid=(st+en)/2;
    if(st==en)
    {
        if(st==ind)
        {
            tree[node]=val;
        }
        return tree[node];
    }
    else
    {
        if(ind>mid)
        {
            tree[node]=min(tree[2*node],upd2(2*node+1,mid+1,en,ind,val));
        }
        else
        {
            tree[node]=min(tree[2*node+1],upd2(2*node,st,mid,ind,val));
        }
        return tree[node];
    }
}
 
long long int query(int node,int l,int r,int st,int en)
{
    int mid=(st+en)/2;
    if(en<l||st>r)
    {
        return INT_MAX;
    }
    else
    {
        if(l<=st&&en<=r)
        {
            return tree[node];
        }
        else
        {
            return min(query(2*node,l,r,st,mid),query(2*node+1,l,r,mid+1,en));
        }
    }
}


//________________________________________________________ncr function____________________________
/*
here we can calculate the ncr using 
(n C k)=(n−1 C k)+(n−1 C k−1)
if we require for large queries using dp.
(bottom up approach can be better). 
*/

//__pre() function_must be compiled once____ncr function modulo prime number(m)____________________________

long long int m=1e9+7;

long long int power(long long int a,long long int b,long long int m)
{
    if(b==0)
    {
        return 1;
    }
    else
    {
        long long int val=(power(a,b/2,m))%m;
        if(b%2==1)
        {
            long long int temp=(val*a)%m;
            temp=(temp*val)%m;
            return temp;
        }
        else
        {
            return (val*val)%m;
        }
    }
}
long long int maxn=1e5+9;
vector<long long int>fact(maxn,1),invf(maxn,1);
void pre()
{
    for(long long int i=1;i<maxn;i++)
    {
        fact[i]=fact[i-1]*i;
        fact[i]%=m;
    }
    invf[maxn-1]=power(fact[maxn-1],m-2,m);
    for(int i=maxn-2;i>=1;i--)
    {
        invf[i]=(invf[i+1]*(i+1LL))%m;
    }
}
long long int ncr(long long int n,long long int r,long long int m)
{
    if(n<r)
    {
        return 0;
    }
    else
    {
        long long int temp=fact[n]*invf[r];
        temp%=m;
        temp=temp*invf[n-r];
        temp%=m;
        return temp;
    }
}
//_____________________________________________power function modulo m___________________________________

long long int power(long long int a,long long int b,long long int m)
{
    if(b==0)
    {
        return 1;
    }
    else
    {
        long long int val=(power(a,b/2,m))%m;
        if(b%2==1)
        {
            long long int temp=(val*a)%m;
            temp=(temp*val)%m;
            return temp;
        }
        else
        {
            return (val*val)%m;
        }
    }
}

//___________________________________________________prefix function_(KMP Algorithm)_______________________________________________

vector<int> prefix_function(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//___________________________________________________Manachers Algorithm___________________________________________________________

vector<int>manachers(string s)
{
    int n=s.length();
    vector<int>v(n,0);
    int l=-1,r=-1,l1,r1,l2,r2;
    for(int i=0;i<n;i++)
    {
        if(i<=r)
        {
            int j=r+l-i;
            l1=j-v[j]/2,r1=j+v[j]/2;
            l2=i-v[j]/2,r2=i+v[j]/2;
            if(l1==l&&r2==r)
            {
                while(l2-1>=0&&r2+1<n&&s[l2-1]==s[r2+1])
                {
                    l2--;
                    r2++;
                }
                v[i]=r2-l2+1;
                if(r2>r)
                {
                    l=l2;
                    r=r2;
                }
            }
            else if(l1<l)
            {
                v[i]=2*(j-l)+1;
            }
            else
            {
                v[i]=v[j];
            }
        }
        else
        {
            l=i,r=i;
            while(l-1>=0&&r+1<n&&s[l-1]==s[r+1])
            {
                l--;
                r++;
            }
            v[i]=r-l+1;
        }
    }
    return v;
}

/*
____Inside main function___
string a,b="";
    cin>>a;
    int n=a.length();
    vector<int>oddlen=manachers(a);
    for(int i=0;i<n;i++)
    {
        b+="#";
        b+=a[i];
    }
    b+="#";
    vector<int>evenlen=manachers(b);
  //evenlen string palindrome lengths are evenlen[i]/2 while oddlen palindromes length are oddlen[i].
  // oddlen string palindrome with value oddlen[i] at index i start at i-oddlen[i] and end at i+oddlen[i]/2.
*/

//_______________________________________________________________seive________________________________________________________________________

vector<int> seive()
{
    int maxn=1e6+3;
    vector<int>sev(maxn,1);
    sev[0]=0;
    sev[1]=0;
    for(int i=2;i<maxn;i++)
    {
        if(sev[i]==1)
        {
            for(int j=i*i;j<maxn;j+=i)
            {
                sev[j]=0;
            }
        }
    }
    vector<int>v;
    for(int i=2;i<maxn;i++)
    {
        if(sev[i]==1)
        {
            v.push_back(i);
        }
    }
    return v;
}


// _______________________________________________________disjoint sets_____________________________________________________________________

vector<int>p,r;
/*
	initializing p->parent and r->rank
	p.clear();
	p.resize(n+1,-1);
    	r.clear();
    	r.resize(n+1,1);
*/
int fun2(int x)
{    // finding the parent of node x
    if(p[x]>0)
    {
//path compression in finding
        return p[x]=fun2(p[x]);
    }
    else
    {
        return x;
    }
}
void fun1(int x,int y)
{  //for connecting x and y nodes if they are not connected
    x=fun2(x);
    y=fun2(y);
// union by rank
	if(r[x]>r[y])
	{
		p[y]=x;
		r[x]+=r[y];
	}
	else
	{
		p[x]=y;
		r[y]+=r[x];
	}
}


// setprecision upto 10 digits

    cout<<fixed;
    cout<<setprecision(10);


// defining comparators used in priority queue and multiset

struct comparenum{
    bool operator()(pair<int,int>p1,pair<int,int>p2)
{
    if(p1.first==p2.first)
    {
        if(p1.second<p2.second)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if(p1.first>p2.first)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
};
 //inside driver function declaration
/*
priority_queue<pair<int,int>,vector<pair<int,int>>,comparenum>p;
*/
// for vectors
/*
vector<pair<int,int>>v;
sort(v.begin(),v.end(),comparenum());
*/
//__________________________________________________________________Quicksort_____________________________________
/*
  ________this is for returning the index of pivot after sorting (Descending order)_________
*/
    int quicksort_returning_pivot_index(vector<int>& nums, int left, int right) {
        int pivot = nums[left], l = left + 1, r = right;
        while (l <= r) {
            if (nums[l] < pivot && nums[r] > pivot) {
                swap(nums[l++], nums[r--]);
            }
            if (nums[l] >= pivot) {
                l++;
            }
            if (nums[r] <= pivot) {
                r--;
            }
        }
        swap(nums[left], nums[r]);
        // return the index where pivot element will be place
        return r;
    }


void quicksort(vector<int>&nums,int left,int right)
{
    if(left>=right)
    {
        return;
    }
    int l=left+1,r=right,pivot=nums[left];
    while(l<=r)
    {
        if(nums[l]>pivot&&nums[r]<pivot)
        {
            swap(nums[l],nums[r]);
            l++;
            r--;
        }
        if(nums[l]<=pivot)
        {
            l++;
        }
        if(nums[r]>=pivot)
        {
            r--;
        }
    }
    swap(nums[left],nums[r]);
    quicksort(nums,left,r-1);
    quicksort(nums,r+1,right);
}

